import math 


def encrypt(m, e, n):
    return pow(m, e, n) # m ^ e mod n

def decrypt(c, p, q, dp, dq, qinv):
    m_1 = pow(c, dp, p)
    m_2 = pow(c, dq, q)

    h = 0 

    if m_1 > m_2: 
        h = ((m_1 - m_2) * qinv) % p
    else: 
        h = p - (((m_2 - m_1) * qinv) % p)

    return m_2 + q * h

def main(n, e, d, p ,q, dp, dq, qinv, m):
    # sanity checks 
    if n != (p * q):
        print('bad modulus')
        return 
    
    lamda = math.lcm(p - 1, q - 1)
    
    if (e * d) % lamda != 1:
        print('bad exponent/modulus')
        return 
    if (e * dp) % (p-1) != 1:
        print('bad exponent1')
        return
    if (e * dq) % (q-1) != 1:
        print('bad exponent2')
        return
    if (qinv * q) % (p) != 1:
        print('bad coefficient')
        return
    if math.gcd(e, lamda) != 1: 
        print('e not coprime to lambda')
        return
    if m >= n: 
        print('bad message representative')
        return

    # simulate
    c = encrypt(m, e, n)
    if c >= n: 
        print('bad ciphertext candidate')
        return
    d = decrypt(c, p, q, dp, dq, qinv)
    print('encrypted:',c)
    print('decrypted:',d)

    print('success' if d == m else 'failure')







if __name__ == '__main__':
    n = 13936481623140468182063432967348915085380070627833257569588696647645959836214721562655790014849706545621750537811002351853046051017740902078069683762368530810886854279089831338041825922465546486580469994837258086710874114837421118453761065486102957804612607385309571384459830051099779427383351343941359144131097537546704847588470280635560972350345698109717936437705815209476288287247487623595692372538434557626115713197522124373969621423108912804063975571926256902852077062901740773987302984515861599474454138060043487767239443990728705123375767667378166152392813051474443098025096248454944829712674516569104159443171
    e = 1410766311958168582036878421477538403848384987663017095645163874469855613207271997163302756731992826992655662819651254248434342751748049177016097009755978955000506673185822589537124155397858540903710754018547682357842183009321530477936977495064535005093307584970790368121002459894562738239145511856824450774578949350540677527389419958304109286954317585739009614219949874037658819667262907811005731248912690275757008287938092115234818037442326170011466660834568104086829372513358685574000665655766593105562665018226838354081113953664240492522432734261692978452969860710686371304931646437602750784770561500305385278147
    d = 4853675577171684622199276979013440526438243599691260237011505900763246477606798274295001001650745979558378831807190956711038982962631416802347043865480784065773506535163658423011551261467130109172711009999586243115743363595428805618978635817589233978161782460565697972435477505143176713064883077369875486319349385638918191357114680630707810529717448538243090149392883675276308986388352279032496362853647637331459070289088966178432429655717291470494749675558422752504810943439836559453863928963091091061075235946715346370258996448540307452646799528098290468212961586216178805536907097527371062811871787028781676101931 
    p = 108713703458352492324444340746905546586070847016098462320397967559953851621394843861035924174319825404388247573950135690478670541598313253002272380057803608106098419094738376163023613014730986433574602903709018270210392442589489029399126811750261682824316715628719244198470298625459877573315848576362531117327
    q = 128194341465696116241857357842464869892443080461148922568959579008650117881162088448269880427313629358259524946011017972298383350749747852254594899497202442471483377014889073608029835564033834785186544034274246956658961307690097245862588630287514130912532564081469515580325593550689886594497712778742496692973
    dp = 92634462360296986602065575180912275959019901255577524720939873660818732360493396581530132137583981560751584270661599147443167613208592199080377726503248538127655371938677590945803907013403324390407727256046800018554101183738523896011067066055796518448689591468122104406292146906529746066258032876518917238355
    dq = 96073726468605319493978552466619771760798980348367487171838406036753944862723750853927685096805995996550395396299491697786547245140311090938466806369182470818718387059386818889744468413501982279801410846904969548372573984358058917479919980701535262861129732519166218912237518029841127540706642825330380973719
    qinv = 33848148568351390698972192292712369118721077234223729421026178343822470206417721519933945172473528670353199394634177999234792336191875446091483649252597232444313729730169270504440863031047844622007188680577052796222585633054426192837925575275910979019928357544763336372364739816421672394843347753501557348176
    m = 13557860898166986683343578352377485545120042755829994214643952978154200796988775563692106016084872776238867449110039440204386354985443944614979408044390735185463192852105608997293223424785213634915631190029961954782555458177594338742683261403740502186428674527064389242010109058610692549391013311482296076750135629259312999249765264518833110718930653646328261543657120109980481438704179250796405103829451652252826139712341746561015405101945931919673810554581394988716895722317780341451247032250485304066809160185528655560124502681883969989122390072465050186884770880238990115551392422088915080790939053146056477630804
    main(n, e, d, p, q, dp, dq, qinv, m)